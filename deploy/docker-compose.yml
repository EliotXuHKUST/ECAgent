version: '3.8'

services:
  # API服务
  ecagent-api:
    build: 
      context: ../../
      dockerfile: deploy/docker/Dockerfile
    container_name: ecagent-api
    restart: unless-stopped
    ports:
      - "8000:8000"
    volumes:
      - ../../data:/app/data
      - ../../chroma_db:/app/chroma_db
      - ../../logs:/app/logs
      - ../../models:/app/models
      - ../../config:/app/config
    environment:
      - PYTHONPATH=/app
      - HF_HOME=/app/models
      - TRANSFORMERS_CACHE=/app/models
      - MODEL_LLM_DEVICE=auto
      - MODEL_EMBEDDING_DEVICE=cpu
      - API_API_HOST=0.0.0.0
      - API_API_PORT=8000
      - SECURITY_ENABLE_AUDIT_LOG=true
      - DATA_LOG_LEVEL=INFO
    deploy:
      resources:
        limits:
          memory: 8G
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    depends_on:
      - redis
    networks:
      - ecagent-network

  # 前端服务
  ecagent-frontend:
    build: 
      context: ../../
      dockerfile: deploy/docker/Dockerfile
    container_name: ecagent-frontend
    restart: unless-stopped
    ports:
      - "7860:7860"
    volumes:
      - ../../config:/app/config
    environment:
      - PYTHONPATH=/app
      - FRONTEND_GRADIO_HOST=0.0.0.0
      - FRONTEND_GRADIO_PORT=7860
      - API_API_HOST=ecagent-api
      - API_API_PORT=8000
    command: ["python", "frontend/gradio_app.py"]
    depends_on:
      - ecagent-api
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7860"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - ecagent-network

  # Redis缓存服务
  redis:
    image: redis:7-alpine
    container_name: ecagent-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --appendfsync everysec
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - ecagent-network

  # Nginx反向代理
  nginx:
    image: nginx:alpine
    container_name: ecagent-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - ecagent-api
      - ecagent-frontend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - ecagent-network

  # 监控服务 (可选)
  prometheus:
    image: prom/prometheus:latest
    container_name: ecagent-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - ecagent-network

  # Grafana仪表板 (可选)
  grafana:
    image: grafana/grafana:latest
    container_name: ecagent-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    depends_on:
      - prometheus
    networks:
      - ecagent-network

volumes:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  ecagent-network:
    driver: bridge 